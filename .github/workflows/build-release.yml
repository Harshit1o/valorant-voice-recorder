name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Cache Electron
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/electron
          ~/.cache/electron-builder
        key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-electron-

    - name: Configure npm
      run: |
        npm config set network-timeout 300000
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-retries 5

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install dependencies (without Electron)
      run: npm install --ignore-scripts --verbose

    - name: Install Electron separately
      run: |
        npm install electron@27.0.0 --verbose
        npx electron --version

    - name: Install electron-builder
      run: npm install --save-dev electron-builder --verbose

    - name: Build TypeScript
      run: npm run build

    - name: Remove problematic build files
      run: |
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "build/installer.nsh") { Remove-Item -Force "build/installer.nsh" }
        if (Test-Path "build/LICENSE.txt") { Remove-Item -Force "build/LICENSE.txt" }
      shell: pwsh

    - name: Build Electron app (Windows)
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        # Use GitHub's built-in signing (limited but free)
        CSC_LINK: ""
        CSC_KEY_PASSWORD: ""

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          release/*.exe
          release/*.msi

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-installer/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}