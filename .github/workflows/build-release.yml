name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install electron-builder
      run: npm install --save-dev electron-builder

    - name: Build TypeScript
      run: npm run build

    - name: Create default icon (if missing)
      run: |
        if [ ! -f "build/icon.png" ]; then
          mkdir -p build
          echo "Creating default icon..."
          # Create a simple default icon (this is a placeholder)
        fi
      shell: bash

    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: npm run dist:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          release/*.exe
          release/*.msi

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: |
          release/*.dmg
          release/*.pkg

    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-installer
        path: |
          release/*.AppImage
          release/*.deb
          release/*.rpm

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-installer/*
          macos-installer/*
          linux-installer/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}